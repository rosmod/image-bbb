// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/krpc.proto

#ifndef PROTOBUF_protobuf_2fkrpc_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fkrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace krpc {
namespace schema {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_protobuf_2fkrpc_2eproto();
void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

class Argument;
class Class;
class Dictionary;
class DictionaryEntry;
class Enumeration;
class EnumerationValue;
class List;
class Parameter;
class Procedure;
class Request;
class Response;
class Service;
class Services;
class Set;
class Status;
class StreamMessage;
class StreamResponse;
class Tuple;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string procedure = 2;
  void clear_procedure();
  static const int kProcedureFieldNumber = 2;
  const ::std::string& procedure() const;
  void set_procedure(const ::std::string& value);
  void set_procedure(const char* value);
  void set_procedure(const char* value, size_t size);
  ::std::string* mutable_procedure();
  ::std::string* release_procedure();
  void set_allocated_procedure(::std::string* procedure);

  // repeated .krpc.schema.Argument arguments = 3;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 3;
  const ::krpc::schema::Argument& arguments(int index) const;
  ::krpc::schema::Argument* mutable_arguments(int index);
  ::krpc::schema::Argument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Argument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Argument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:krpc.schema.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr procedure_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Argument > arguments_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Argument : public ::google::protobuf::Message {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  void Swap(Argument* other);

  // implements Message ----------------------------------------------

  inline Argument* New() const { return New(NULL); }

  Argument* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Argument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 position = 1;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:krpc.schema.Argument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint32 position_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Argument* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // optional bool has_error = 2;
  void clear_has_error();
  static const int kHasErrorFieldNumber = 2;
  bool has_error() const;
  void set_has_error(bool value);

  // optional string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional bool has_return_value = 4;
  void clear_has_return_value();
  static const int kHasReturnValueFieldNumber = 4;
  bool has_return_value() const;
  void set_has_return_value(bool value);

  // optional bytes return_value = 5;
  void clear_return_value();
  static const int kReturnValueFieldNumber = 5;
  const ::std::string& return_value() const;
  void set_return_value(const ::std::string& value);
  void set_return_value(const char* value);
  void set_return_value(const void* value, size_t size);
  ::std::string* mutable_return_value();
  ::std::string* release_return_value();
  void set_allocated_return_value(::std::string* return_value);

  // @@protoc_insertion_point(class_scope:krpc.schema.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double time_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr return_value_;
  bool has_error_;
  bool has_return_value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class StreamMessage : public ::google::protobuf::Message {
 public:
  StreamMessage();
  virtual ~StreamMessage();

  StreamMessage(const StreamMessage& from);

  inline StreamMessage& operator=(const StreamMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMessage& default_instance();

  void Swap(StreamMessage* other);

  // implements Message ----------------------------------------------

  inline StreamMessage* New() const { return New(NULL); }

  StreamMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamMessage& from);
  void MergeFrom(const StreamMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .krpc.schema.StreamResponse responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  const ::krpc::schema::StreamResponse& responses(int index) const;
  ::krpc::schema::StreamResponse* mutable_responses(int index);
  ::krpc::schema::StreamResponse* add_responses();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::StreamResponse >*
      mutable_responses();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::StreamResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:krpc.schema.StreamMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::StreamResponse > responses_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static StreamMessage* default_instance_;
};
// -------------------------------------------------------------------

class StreamResponse : public ::google::protobuf::Message {
 public:
  StreamResponse();
  virtual ~StreamResponse();

  StreamResponse(const StreamResponse& from);

  inline StreamResponse& operator=(const StreamResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamResponse& default_instance();

  void Swap(StreamResponse* other);

  // implements Message ----------------------------------------------

  inline StreamResponse* New() const { return New(NULL); }

  StreamResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamResponse& from);
  void MergeFrom(const StreamResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .krpc.schema.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::krpc::schema::Response& response() const;
  ::krpc::schema::Response* mutable_response();
  ::krpc::schema::Response* release_response();
  void set_allocated_response(::krpc::schema::Response* response);

  // @@protoc_insertion_point(class_scope:krpc.schema.StreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::krpc::schema::Response* response_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static StreamResponse* default_instance_;
};
// -------------------------------------------------------------------

class Services : public ::google::protobuf::Message {
 public:
  Services();
  virtual ~Services();

  Services(const Services& from);

  inline Services& operator=(const Services& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Services& default_instance();

  void Swap(Services* other);

  // implements Message ----------------------------------------------

  inline Services* New() const { return New(NULL); }

  Services* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Services& from);
  void MergeFrom(const Services& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Services* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .krpc.schema.Service services = 1;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 1;
  const ::krpc::schema::Service& services(int index) const;
  ::krpc::schema::Service* mutable_services(int index);
  ::krpc::schema::Service* add_services();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Service >*
      mutable_services();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Service >&
      services() const;

  // @@protoc_insertion_point(class_scope:krpc.schema.Services)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Service > services_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Services* default_instance_;
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  void Swap(Service* other);

  // implements Message ----------------------------------------------

  inline Service* New() const { return New(NULL); }

  Service* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .krpc.schema.Procedure procedures = 2;
  int procedures_size() const;
  void clear_procedures();
  static const int kProceduresFieldNumber = 2;
  const ::krpc::schema::Procedure& procedures(int index) const;
  ::krpc::schema::Procedure* mutable_procedures(int index);
  ::krpc::schema::Procedure* add_procedures();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Procedure >*
      mutable_procedures();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Procedure >&
      procedures() const;

  // repeated .krpc.schema.Class classes = 3;
  int classes_size() const;
  void clear_classes();
  static const int kClassesFieldNumber = 3;
  const ::krpc::schema::Class& classes(int index) const;
  ::krpc::schema::Class* mutable_classes(int index);
  ::krpc::schema::Class* add_classes();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Class >*
      mutable_classes();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Class >&
      classes() const;

  // repeated .krpc.schema.Enumeration enumerations = 4;
  int enumerations_size() const;
  void clear_enumerations();
  static const int kEnumerationsFieldNumber = 4;
  const ::krpc::schema::Enumeration& enumerations(int index) const;
  ::krpc::schema::Enumeration* mutable_enumerations(int index);
  ::krpc::schema::Enumeration* add_enumerations();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Enumeration >*
      mutable_enumerations();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Enumeration >&
      enumerations() const;

  // optional string documentation = 5;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 5;
  const ::std::string& documentation() const;
  void set_documentation(const ::std::string& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  ::std::string* mutable_documentation();
  ::std::string* release_documentation();
  void set_allocated_documentation(::std::string* documentation);

  // @@protoc_insertion_point(class_scope:krpc.schema.Service)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Procedure > procedures_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Class > classes_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Enumeration > enumerations_;
  ::google::protobuf::internal::ArenaStringPtr documentation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Service* default_instance_;
};
// -------------------------------------------------------------------

class Procedure : public ::google::protobuf::Message {
 public:
  Procedure();
  virtual ~Procedure();

  Procedure(const Procedure& from);

  inline Procedure& operator=(const Procedure& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Procedure& default_instance();

  void Swap(Procedure* other);

  // implements Message ----------------------------------------------

  inline Procedure* New() const { return New(NULL); }

  Procedure* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Procedure& from);
  void MergeFrom(const Procedure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Procedure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .krpc.schema.Parameter parameters = 2;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 2;
  const ::krpc::schema::Parameter& parameters(int index) const;
  ::krpc::schema::Parameter* mutable_parameters(int index);
  ::krpc::schema::Parameter* add_parameters();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Parameter >*
      mutable_parameters();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Parameter >&
      parameters() const;

  // optional bool has_return_type = 3;
  void clear_has_return_type();
  static const int kHasReturnTypeFieldNumber = 3;
  bool has_return_type() const;
  void set_has_return_type(bool value);

  // optional string return_type = 4;
  void clear_return_type();
  static const int kReturnTypeFieldNumber = 4;
  const ::std::string& return_type() const;
  void set_return_type(const ::std::string& value);
  void set_return_type(const char* value);
  void set_return_type(const char* value, size_t size);
  ::std::string* mutable_return_type();
  ::std::string* release_return_type();
  void set_allocated_return_type(::std::string* return_type);

  // repeated string attributes = 5;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 5;
  const ::std::string& attributes(int index) const;
  ::std::string* mutable_attributes(int index);
  void set_attributes(int index, const ::std::string& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  ::std::string* add_attributes();
  void add_attributes(const ::std::string& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attributes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attributes();

  // optional string documentation = 6;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 6;
  const ::std::string& documentation() const;
  void set_documentation(const ::std::string& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  ::std::string* mutable_documentation();
  ::std::string* release_documentation();
  void set_allocated_documentation(::std::string* documentation);

  // @@protoc_insertion_point(class_scope:krpc.schema.Procedure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::Parameter > parameters_;
  ::google::protobuf::internal::ArenaStringPtr return_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attributes_;
  ::google::protobuf::internal::ArenaStringPtr documentation_;
  bool has_return_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Procedure* default_instance_;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  inline Parameter* New() const { return New(NULL); }

  Parameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bool has_default_value = 3;
  void clear_has_default_value();
  static const int kHasDefaultValueFieldNumber = 3;
  bool has_default_value() const;
  void set_has_default_value(bool value);

  // optional bytes default_value = 4;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 4;
  const ::std::string& default_value() const;
  void set_default_value(const ::std::string& value);
  void set_default_value(const char* value);
  void set_default_value(const void* value, size_t size);
  ::std::string* mutable_default_value();
  ::std::string* release_default_value();
  void set_allocated_default_value(::std::string* default_value);

  // @@protoc_insertion_point(class_scope:krpc.schema.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr default_value_;
  bool has_default_value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// -------------------------------------------------------------------

class Class : public ::google::protobuf::Message {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Class& default_instance();

  void Swap(Class* other);

  // implements Message ----------------------------------------------

  inline Class* New() const { return New(NULL); }

  Class* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Class* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string documentation = 2;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 2;
  const ::std::string& documentation() const;
  void set_documentation(const ::std::string& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  ::std::string* mutable_documentation();
  ::std::string* release_documentation();
  void set_allocated_documentation(::std::string* documentation);

  // @@protoc_insertion_point(class_scope:krpc.schema.Class)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr documentation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Class* default_instance_;
};
// -------------------------------------------------------------------

class Enumeration : public ::google::protobuf::Message {
 public:
  Enumeration();
  virtual ~Enumeration();

  Enumeration(const Enumeration& from);

  inline Enumeration& operator=(const Enumeration& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Enumeration& default_instance();

  void Swap(Enumeration* other);

  // implements Message ----------------------------------------------

  inline Enumeration* New() const { return New(NULL); }

  Enumeration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Enumeration& from);
  void MergeFrom(const Enumeration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Enumeration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .krpc.schema.EnumerationValue values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::krpc::schema::EnumerationValue& values(int index) const;
  ::krpc::schema::EnumerationValue* mutable_values(int index);
  ::krpc::schema::EnumerationValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::EnumerationValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::EnumerationValue >&
      values() const;

  // optional string documentation = 3;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 3;
  const ::std::string& documentation() const;
  void set_documentation(const ::std::string& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  ::std::string* mutable_documentation();
  ::std::string* release_documentation();
  void set_allocated_documentation(::std::string* documentation);

  // @@protoc_insertion_point(class_scope:krpc.schema.Enumeration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::EnumerationValue > values_;
  ::google::protobuf::internal::ArenaStringPtr documentation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Enumeration* default_instance_;
};
// -------------------------------------------------------------------

class EnumerationValue : public ::google::protobuf::Message {
 public:
  EnumerationValue();
  virtual ~EnumerationValue();

  EnumerationValue(const EnumerationValue& from);

  inline EnumerationValue& operator=(const EnumerationValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumerationValue& default_instance();

  void Swap(EnumerationValue* other);

  // implements Message ----------------------------------------------

  inline EnumerationValue* New() const { return New(NULL); }

  EnumerationValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnumerationValue& from);
  void MergeFrom(const EnumerationValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnumerationValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional string documentation = 3;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 3;
  const ::std::string& documentation() const;
  void set_documentation(const ::std::string& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  ::std::string* mutable_documentation();
  ::std::string* release_documentation();
  void set_allocated_documentation(::std::string* documentation);

  // @@protoc_insertion_point(class_scope:krpc.schema.EnumerationValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr documentation_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static EnumerationValue* default_instance_;
};
// -------------------------------------------------------------------

class List : public ::google::protobuf::Message {
 public:
  List();
  virtual ~List();

  List(const List& from);

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const List& default_instance();

  void Swap(List* other);

  // implements Message ----------------------------------------------

  inline List* New() const { return New(NULL); }

  List* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(List* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  void set_items(int index, const char* value);
  void set_items(int index, const void* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  void add_items(const char* value);
  void add_items(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:krpc.schema.List)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static List* default_instance_;
};
// -------------------------------------------------------------------

class Dictionary : public ::google::protobuf::Message {
 public:
  Dictionary();
  virtual ~Dictionary();

  Dictionary(const Dictionary& from);

  inline Dictionary& operator=(const Dictionary& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dictionary& default_instance();

  void Swap(Dictionary* other);

  // implements Message ----------------------------------------------

  inline Dictionary* New() const { return New(NULL); }

  Dictionary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dictionary& from);
  void MergeFrom(const Dictionary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dictionary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .krpc.schema.DictionaryEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::krpc::schema::DictionaryEntry& entries(int index) const;
  ::krpc::schema::DictionaryEntry* mutable_entries(int index);
  ::krpc::schema::DictionaryEntry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::DictionaryEntry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::krpc::schema::DictionaryEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:krpc.schema.Dictionary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::krpc::schema::DictionaryEntry > entries_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Dictionary* default_instance_;
};
// -------------------------------------------------------------------

class DictionaryEntry : public ::google::protobuf::Message {
 public:
  DictionaryEntry();
  virtual ~DictionaryEntry();

  DictionaryEntry(const DictionaryEntry& from);

  inline DictionaryEntry& operator=(const DictionaryEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictionaryEntry& default_instance();

  void Swap(DictionaryEntry* other);

  // implements Message ----------------------------------------------

  inline DictionaryEntry* New() const { return New(NULL); }

  DictionaryEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictionaryEntry& from);
  void MergeFrom(const DictionaryEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictionaryEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:krpc.schema.DictionaryEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static DictionaryEntry* default_instance_;
};
// -------------------------------------------------------------------

class Set : public ::google::protobuf::Message {
 public:
  Set();
  virtual ~Set();

  Set(const Set& from);

  inline Set& operator=(const Set& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Set& default_instance();

  void Swap(Set* other);

  // implements Message ----------------------------------------------

  inline Set* New() const { return New(NULL); }

  Set* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Set& from);
  void MergeFrom(const Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Set* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  void set_items(int index, const char* value);
  void set_items(int index, const void* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  void add_items(const char* value);
  void add_items(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:krpc.schema.Set)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Set* default_instance_;
};
// -------------------------------------------------------------------

class Tuple : public ::google::protobuf::Message {
 public:
  Tuple();
  virtual ~Tuple();

  Tuple(const Tuple& from);

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tuple& default_instance();

  void Swap(Tuple* other);

  // implements Message ----------------------------------------------

  inline Tuple* New() const { return New(NULL); }

  Tuple* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tuple& from);
  void MergeFrom(const Tuple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tuple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  void set_items(int index, const char* value);
  void set_items(int index, const void* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  void add_items(const char* value);
  void add_items(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:krpc.schema.Tuple)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Tuple* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional uint64 bytes_read = 2;
  void clear_bytes_read();
  static const int kBytesReadFieldNumber = 2;
  ::google::protobuf::uint64 bytes_read() const;
  void set_bytes_read(::google::protobuf::uint64 value);

  // optional uint64 bytes_written = 3;
  void clear_bytes_written();
  static const int kBytesWrittenFieldNumber = 3;
  ::google::protobuf::uint64 bytes_written() const;
  void set_bytes_written(::google::protobuf::uint64 value);

  // optional float bytes_read_rate = 4;
  void clear_bytes_read_rate();
  static const int kBytesReadRateFieldNumber = 4;
  float bytes_read_rate() const;
  void set_bytes_read_rate(float value);

  // optional float bytes_written_rate = 5;
  void clear_bytes_written_rate();
  static const int kBytesWrittenRateFieldNumber = 5;
  float bytes_written_rate() const;
  void set_bytes_written_rate(float value);

  // optional uint64 rpcs_executed = 6;
  void clear_rpcs_executed();
  static const int kRpcsExecutedFieldNumber = 6;
  ::google::protobuf::uint64 rpcs_executed() const;
  void set_rpcs_executed(::google::protobuf::uint64 value);

  // optional float rpc_rate = 7;
  void clear_rpc_rate();
  static const int kRpcRateFieldNumber = 7;
  float rpc_rate() const;
  void set_rpc_rate(float value);

  // optional bool one_rpc_per_update = 8;
  void clear_one_rpc_per_update();
  static const int kOneRpcPerUpdateFieldNumber = 8;
  bool one_rpc_per_update() const;
  void set_one_rpc_per_update(bool value);

  // optional uint32 max_time_per_update = 9;
  void clear_max_time_per_update();
  static const int kMaxTimePerUpdateFieldNumber = 9;
  ::google::protobuf::uint32 max_time_per_update() const;
  void set_max_time_per_update(::google::protobuf::uint32 value);

  // optional bool adaptive_rate_control = 10;
  void clear_adaptive_rate_control();
  static const int kAdaptiveRateControlFieldNumber = 10;
  bool adaptive_rate_control() const;
  void set_adaptive_rate_control(bool value);

  // optional bool blocking_recv = 11;
  void clear_blocking_recv();
  static const int kBlockingRecvFieldNumber = 11;
  bool blocking_recv() const;
  void set_blocking_recv(bool value);

  // optional uint32 recv_timeout = 12;
  void clear_recv_timeout();
  static const int kRecvTimeoutFieldNumber = 12;
  ::google::protobuf::uint32 recv_timeout() const;
  void set_recv_timeout(::google::protobuf::uint32 value);

  // optional float time_per_rpc_update = 13;
  void clear_time_per_rpc_update();
  static const int kTimePerRpcUpdateFieldNumber = 13;
  float time_per_rpc_update() const;
  void set_time_per_rpc_update(float value);

  // optional float poll_time_per_rpc_update = 14;
  void clear_poll_time_per_rpc_update();
  static const int kPollTimePerRpcUpdateFieldNumber = 14;
  float poll_time_per_rpc_update() const;
  void set_poll_time_per_rpc_update(float value);

  // optional float exec_time_per_rpc_update = 15;
  void clear_exec_time_per_rpc_update();
  static const int kExecTimePerRpcUpdateFieldNumber = 15;
  float exec_time_per_rpc_update() const;
  void set_exec_time_per_rpc_update(float value);

  // optional uint32 stream_rpcs = 16;
  void clear_stream_rpcs();
  static const int kStreamRpcsFieldNumber = 16;
  ::google::protobuf::uint32 stream_rpcs() const;
  void set_stream_rpcs(::google::protobuf::uint32 value);

  // optional uint64 stream_rpcs_executed = 17;
  void clear_stream_rpcs_executed();
  static const int kStreamRpcsExecutedFieldNumber = 17;
  ::google::protobuf::uint64 stream_rpcs_executed() const;
  void set_stream_rpcs_executed(::google::protobuf::uint64 value);

  // optional float stream_rpc_rate = 18;
  void clear_stream_rpc_rate();
  static const int kStreamRpcRateFieldNumber = 18;
  float stream_rpc_rate() const;
  void set_stream_rpc_rate(float value);

  // optional float time_per_stream_update = 19;
  void clear_time_per_stream_update();
  static const int kTimePerStreamUpdateFieldNumber = 19;
  float time_per_stream_update() const;
  void set_time_per_stream_update(float value);

  // @@protoc_insertion_point(class_scope:krpc.schema.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 bytes_read_;
  ::google::protobuf::uint64 bytes_written_;
  float bytes_read_rate_;
  float bytes_written_rate_;
  ::google::protobuf::uint64 rpcs_executed_;
  float rpc_rate_;
  ::google::protobuf::uint32 max_time_per_update_;
  bool one_rpc_per_update_;
  bool adaptive_rate_control_;
  bool blocking_recv_;
  ::google::protobuf::uint32 recv_timeout_;
  float time_per_rpc_update_;
  float poll_time_per_rpc_update_;
  float exec_time_per_rpc_update_;
  ::google::protobuf::uint32 stream_rpcs_;
  ::google::protobuf::uint64 stream_rpcs_executed_;
  float stream_rpc_rate_;
  float time_per_stream_update_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fkrpc_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fkrpc_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string service = 1;
inline void Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::service() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Request.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Request.service)
}
inline void Request::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Request.service)
}
inline void Request::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Request.service)
}
inline ::std::string* Request::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_service() {
  // @@protoc_insertion_point(field_release:krpc.schema.Request.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Request.service)
}

// optional string procedure = 2;
inline void Request::clear_procedure() {
  procedure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::procedure() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Request.procedure)
  return procedure_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_procedure(const ::std::string& value) {
  
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Request.procedure)
}
inline void Request::set_procedure(const char* value) {
  
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Request.procedure)
}
inline void Request::set_procedure(const char* value, size_t size) {
  
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Request.procedure)
}
inline ::std::string* Request::mutable_procedure() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Request.procedure)
  return procedure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_procedure() {
  // @@protoc_insertion_point(field_release:krpc.schema.Request.procedure)
  
  return procedure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_procedure(::std::string* procedure) {
  if (procedure != NULL) {
    
  } else {
    
  }
  procedure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), procedure);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Request.procedure)
}

// repeated .krpc.schema.Argument arguments = 3;
inline int Request::arguments_size() const {
  return arguments_.size();
}
inline void Request::clear_arguments() {
  arguments_.Clear();
}
inline const ::krpc::schema::Argument& Request::arguments(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Request.arguments)
  return arguments_.Get(index);
}
inline ::krpc::schema::Argument* Request::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Request.arguments)
  return arguments_.Mutable(index);
}
inline ::krpc::schema::Argument* Request::add_arguments() {
  // @@protoc_insertion_point(field_add:krpc.schema.Request.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Argument >*
Request::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Request.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Argument >&
Request::arguments() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Request.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// Argument

// optional uint32 position = 1;
inline void Argument::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 Argument::position() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Argument.position)
  return position_;
}
inline void Argument::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Argument.position)
}

// optional bytes value = 2;
inline void Argument::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Argument::value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Argument.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Argument.value)
}
inline void Argument::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Argument.value)
}
inline void Argument::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Argument.value)
}
inline ::std::string* Argument::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Argument.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_value() {
  // @@protoc_insertion_point(field_release:krpc.schema.Argument.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Argument.value)
}

// -------------------------------------------------------------------

// Response

// optional double time = 1;
inline void Response::clear_time() {
  time_ = 0;
}
inline double Response::time() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Response.time)
  return time_;
}
inline void Response::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Response.time)
}

// optional bool has_error = 2;
inline void Response::clear_has_error() {
  has_error_ = false;
}
inline bool Response::has_error() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Response.has_error)
  return has_error_;
}
inline void Response::set_has_error(bool value) {
  
  has_error_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Response.has_error)
}

// optional string error = 3;
inline void Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Response.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Response.error)
}
inline void Response::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Response.error)
}
inline void Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Response.error)
}
inline ::std::string* Response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:krpc.schema.Response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Response.error)
}

// optional bool has_return_value = 4;
inline void Response::clear_has_return_value() {
  has_return_value_ = false;
}
inline bool Response::has_return_value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Response.has_return_value)
  return has_return_value_;
}
inline void Response::set_has_return_value(bool value) {
  
  has_return_value_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Response.has_return_value)
}

// optional bytes return_value = 5;
inline void Response::clear_return_value() {
  return_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::return_value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Response.return_value)
  return return_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_return_value(const ::std::string& value) {
  
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Response.return_value)
}
inline void Response::set_return_value(const char* value) {
  
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Response.return_value)
}
inline void Response::set_return_value(const void* value, size_t size) {
  
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Response.return_value)
}
inline ::std::string* Response::mutable_return_value() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Response.return_value)
  return return_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_return_value() {
  // @@protoc_insertion_point(field_release:krpc.schema.Response.return_value)
  
  return return_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_return_value(::std::string* return_value) {
  if (return_value != NULL) {
    
  } else {
    
  }
  return_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_value);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Response.return_value)
}

// -------------------------------------------------------------------

// StreamMessage

// repeated .krpc.schema.StreamResponse responses = 1;
inline int StreamMessage::responses_size() const {
  return responses_.size();
}
inline void StreamMessage::clear_responses() {
  responses_.Clear();
}
inline const ::krpc::schema::StreamResponse& StreamMessage::responses(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.StreamMessage.responses)
  return responses_.Get(index);
}
inline ::krpc::schema::StreamResponse* StreamMessage::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.StreamMessage.responses)
  return responses_.Mutable(index);
}
inline ::krpc::schema::StreamResponse* StreamMessage::add_responses() {
  // @@protoc_insertion_point(field_add:krpc.schema.StreamMessage.responses)
  return responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::StreamResponse >*
StreamMessage::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.StreamMessage.responses)
  return &responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::StreamResponse >&
StreamMessage::responses() const {
  // @@protoc_insertion_point(field_list:krpc.schema.StreamMessage.responses)
  return responses_;
}

// -------------------------------------------------------------------

// StreamResponse

// optional uint32 id = 1;
inline void StreamResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StreamResponse::id() const {
  // @@protoc_insertion_point(field_get:krpc.schema.StreamResponse.id)
  return id_;
}
inline void StreamResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.StreamResponse.id)
}

// optional .krpc.schema.Response response = 2;
inline bool StreamResponse::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
inline void StreamResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::krpc::schema::Response& StreamResponse::response() const {
  // @@protoc_insertion_point(field_get:krpc.schema.StreamResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::krpc::schema::Response* StreamResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::krpc::schema::Response;
  }
  // @@protoc_insertion_point(field_mutable:krpc.schema.StreamResponse.response)
  return response_;
}
inline ::krpc::schema::Response* StreamResponse::release_response() {
  // @@protoc_insertion_point(field_release:krpc.schema.StreamResponse.response)
  
  ::krpc::schema::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void StreamResponse::set_allocated_response(::krpc::schema::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.StreamResponse.response)
}

// -------------------------------------------------------------------

// Services

// repeated .krpc.schema.Service services = 1;
inline int Services::services_size() const {
  return services_.size();
}
inline void Services::clear_services() {
  services_.Clear();
}
inline const ::krpc::schema::Service& Services::services(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Services.services)
  return services_.Get(index);
}
inline ::krpc::schema::Service* Services::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Services.services)
  return services_.Mutable(index);
}
inline ::krpc::schema::Service* Services::add_services() {
  // @@protoc_insertion_point(field_add:krpc.schema.Services.services)
  return services_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Service >*
Services::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Services.services)
  return &services_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Service >&
Services::services() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Services.services)
  return services_;
}

// -------------------------------------------------------------------

// Service

// optional string name = 1;
inline void Service::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Service.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Service.name)
}
inline void Service::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Service.name)
}
inline void Service::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Service.name)
}
inline ::std::string* Service::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Service.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.Service.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Service.name)
}

// repeated .krpc.schema.Procedure procedures = 2;
inline int Service::procedures_size() const {
  return procedures_.size();
}
inline void Service::clear_procedures() {
  procedures_.Clear();
}
inline const ::krpc::schema::Procedure& Service::procedures(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Service.procedures)
  return procedures_.Get(index);
}
inline ::krpc::schema::Procedure* Service::mutable_procedures(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Service.procedures)
  return procedures_.Mutable(index);
}
inline ::krpc::schema::Procedure* Service::add_procedures() {
  // @@protoc_insertion_point(field_add:krpc.schema.Service.procedures)
  return procedures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Procedure >*
Service::mutable_procedures() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Service.procedures)
  return &procedures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Procedure >&
Service::procedures() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Service.procedures)
  return procedures_;
}

// repeated .krpc.schema.Class classes = 3;
inline int Service::classes_size() const {
  return classes_.size();
}
inline void Service::clear_classes() {
  classes_.Clear();
}
inline const ::krpc::schema::Class& Service::classes(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Service.classes)
  return classes_.Get(index);
}
inline ::krpc::schema::Class* Service::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Service.classes)
  return classes_.Mutable(index);
}
inline ::krpc::schema::Class* Service::add_classes() {
  // @@protoc_insertion_point(field_add:krpc.schema.Service.classes)
  return classes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Class >*
Service::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Service.classes)
  return &classes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Class >&
Service::classes() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Service.classes)
  return classes_;
}

// repeated .krpc.schema.Enumeration enumerations = 4;
inline int Service::enumerations_size() const {
  return enumerations_.size();
}
inline void Service::clear_enumerations() {
  enumerations_.Clear();
}
inline const ::krpc::schema::Enumeration& Service::enumerations(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Service.enumerations)
  return enumerations_.Get(index);
}
inline ::krpc::schema::Enumeration* Service::mutable_enumerations(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Service.enumerations)
  return enumerations_.Mutable(index);
}
inline ::krpc::schema::Enumeration* Service::add_enumerations() {
  // @@protoc_insertion_point(field_add:krpc.schema.Service.enumerations)
  return enumerations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Enumeration >*
Service::mutable_enumerations() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Service.enumerations)
  return &enumerations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Enumeration >&
Service::enumerations() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Service.enumerations)
  return enumerations_;
}

// optional string documentation = 5;
inline void Service::clear_documentation() {
  documentation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::documentation() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Service.documentation)
  return documentation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_documentation(const ::std::string& value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Service.documentation)
}
inline void Service::set_documentation(const char* value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Service.documentation)
}
inline void Service::set_documentation(const char* value, size_t size) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Service.documentation)
}
inline ::std::string* Service::mutable_documentation() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Service.documentation)
  return documentation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_documentation() {
  // @@protoc_insertion_point(field_release:krpc.schema.Service.documentation)
  
  return documentation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_documentation(::std::string* documentation) {
  if (documentation != NULL) {
    
  } else {
    
  }
  documentation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentation);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Service.documentation)
}

// -------------------------------------------------------------------

// Procedure

// optional string name = 1;
inline void Procedure::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Procedure::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Procedure.name)
}
inline void Procedure::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Procedure.name)
}
inline void Procedure::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Procedure.name)
}
inline ::std::string* Procedure::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Procedure.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Procedure::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.Procedure.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Procedure.name)
}

// repeated .krpc.schema.Parameter parameters = 2;
inline int Procedure::parameters_size() const {
  return parameters_.size();
}
inline void Procedure::clear_parameters() {
  parameters_.Clear();
}
inline const ::krpc::schema::Parameter& Procedure::parameters(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.parameters)
  return parameters_.Get(index);
}
inline ::krpc::schema::Parameter* Procedure::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Procedure.parameters)
  return parameters_.Mutable(index);
}
inline ::krpc::schema::Parameter* Procedure::add_parameters() {
  // @@protoc_insertion_point(field_add:krpc.schema.Procedure.parameters)
  return parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::Parameter >*
Procedure::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Procedure.parameters)
  return &parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::Parameter >&
Procedure::parameters() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Procedure.parameters)
  return parameters_;
}

// optional bool has_return_type = 3;
inline void Procedure::clear_has_return_type() {
  has_return_type_ = false;
}
inline bool Procedure::has_return_type() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.has_return_type)
  return has_return_type_;
}
inline void Procedure::set_has_return_type(bool value) {
  
  has_return_type_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Procedure.has_return_type)
}

// optional string return_type = 4;
inline void Procedure::clear_return_type() {
  return_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Procedure::return_type() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.return_type)
  return return_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_return_type(const ::std::string& value) {
  
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Procedure.return_type)
}
inline void Procedure::set_return_type(const char* value) {
  
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Procedure.return_type)
}
inline void Procedure::set_return_type(const char* value, size_t size) {
  
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Procedure.return_type)
}
inline ::std::string* Procedure::mutable_return_type() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Procedure.return_type)
  return return_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Procedure::release_return_type() {
  // @@protoc_insertion_point(field_release:krpc.schema.Procedure.return_type)
  
  return return_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_allocated_return_type(::std::string* return_type) {
  if (return_type != NULL) {
    
  } else {
    
  }
  return_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_type);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Procedure.return_type)
}

// repeated string attributes = 5;
inline int Procedure::attributes_size() const {
  return attributes_.size();
}
inline void Procedure::clear_attributes() {
  attributes_.Clear();
}
inline const ::std::string& Procedure::attributes(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.attributes)
  return attributes_.Get(index);
}
inline ::std::string* Procedure::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Procedure.attributes)
  return attributes_.Mutable(index);
}
inline void Procedure::set_attributes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.schema.Procedure.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void Procedure::set_attributes(int index, const char* value) {
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.schema.Procedure.attributes)
}
inline void Procedure::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Procedure.attributes)
}
inline ::std::string* Procedure::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:krpc.schema.Procedure.attributes)
  return attributes_.Add();
}
inline void Procedure::add_attributes(const ::std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.schema.Procedure.attributes)
}
inline void Procedure::add_attributes(const char* value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.schema.Procedure.attributes)
}
inline void Procedure::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.schema.Procedure.attributes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Procedure::attributes() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Procedure.attributes)
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Procedure::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Procedure.attributes)
  return &attributes_;
}

// optional string documentation = 6;
inline void Procedure::clear_documentation() {
  documentation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Procedure::documentation() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Procedure.documentation)
  return documentation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_documentation(const ::std::string& value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Procedure.documentation)
}
inline void Procedure::set_documentation(const char* value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Procedure.documentation)
}
inline void Procedure::set_documentation(const char* value, size_t size) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Procedure.documentation)
}
inline ::std::string* Procedure::mutable_documentation() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Procedure.documentation)
  return documentation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Procedure::release_documentation() {
  // @@protoc_insertion_point(field_release:krpc.schema.Procedure.documentation)
  
  return documentation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Procedure::set_allocated_documentation(::std::string* documentation) {
  if (documentation != NULL) {
    
  } else {
    
  }
  documentation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentation);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Procedure.documentation)
}

// -------------------------------------------------------------------

// Parameter

// optional string name = 1;
inline void Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Parameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Parameter.name)
}
inline void Parameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Parameter.name)
}
inline void Parameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Parameter.name)
}
inline ::std::string* Parameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.Parameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Parameter.name)
}

// optional string type = 2;
inline void Parameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::type() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Parameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Parameter.type)
}
inline void Parameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Parameter.type)
}
inline void Parameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Parameter.type)
}
inline ::std::string* Parameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Parameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_type() {
  // @@protoc_insertion_point(field_release:krpc.schema.Parameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Parameter.type)
}

// optional bool has_default_value = 3;
inline void Parameter::clear_has_default_value() {
  has_default_value_ = false;
}
inline bool Parameter::has_default_value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Parameter.has_default_value)
  return has_default_value_;
}
inline void Parameter::set_has_default_value(bool value) {
  
  has_default_value_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Parameter.has_default_value)
}

// optional bytes default_value = 4;
inline void Parameter::clear_default_value() {
  default_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::default_value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Parameter.default_value)
  return default_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_default_value(const ::std::string& value) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Parameter.default_value)
}
inline void Parameter::set_default_value(const char* value) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Parameter.default_value)
}
inline void Parameter::set_default_value(const void* value, size_t size) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Parameter.default_value)
}
inline ::std::string* Parameter::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Parameter.default_value)
  return default_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_default_value() {
  // @@protoc_insertion_point(field_release:krpc.schema.Parameter.default_value)
  
  return default_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Parameter.default_value)
}

// -------------------------------------------------------------------

// Class

// optional string name = 1;
inline void Class::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Class::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Class.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Class.name)
}
inline void Class::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Class.name)
}
inline void Class::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Class.name)
}
inline ::std::string* Class::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Class.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Class::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.Class.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Class.name)
}

// optional string documentation = 2;
inline void Class::clear_documentation() {
  documentation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Class::documentation() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Class.documentation)
  return documentation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_documentation(const ::std::string& value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Class.documentation)
}
inline void Class::set_documentation(const char* value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Class.documentation)
}
inline void Class::set_documentation(const char* value, size_t size) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Class.documentation)
}
inline ::std::string* Class::mutable_documentation() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Class.documentation)
  return documentation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Class::release_documentation() {
  // @@protoc_insertion_point(field_release:krpc.schema.Class.documentation)
  
  return documentation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_allocated_documentation(::std::string* documentation) {
  if (documentation != NULL) {
    
  } else {
    
  }
  documentation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentation);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Class.documentation)
}

// -------------------------------------------------------------------

// Enumeration

// optional string name = 1;
inline void Enumeration::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Enumeration::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Enumeration.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Enumeration::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Enumeration.name)
}
inline void Enumeration::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Enumeration.name)
}
inline void Enumeration::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Enumeration.name)
}
inline ::std::string* Enumeration::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Enumeration.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Enumeration::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.Enumeration.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Enumeration::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Enumeration.name)
}

// repeated .krpc.schema.EnumerationValue values = 2;
inline int Enumeration::values_size() const {
  return values_.size();
}
inline void Enumeration::clear_values() {
  values_.Clear();
}
inline const ::krpc::schema::EnumerationValue& Enumeration::values(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Enumeration.values)
  return values_.Get(index);
}
inline ::krpc::schema::EnumerationValue* Enumeration::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Enumeration.values)
  return values_.Mutable(index);
}
inline ::krpc::schema::EnumerationValue* Enumeration::add_values() {
  // @@protoc_insertion_point(field_add:krpc.schema.Enumeration.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::EnumerationValue >*
Enumeration::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Enumeration.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::EnumerationValue >&
Enumeration::values() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Enumeration.values)
  return values_;
}

// optional string documentation = 3;
inline void Enumeration::clear_documentation() {
  documentation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Enumeration::documentation() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Enumeration.documentation)
  return documentation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Enumeration::set_documentation(const ::std::string& value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Enumeration.documentation)
}
inline void Enumeration::set_documentation(const char* value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Enumeration.documentation)
}
inline void Enumeration::set_documentation(const char* value, size_t size) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Enumeration.documentation)
}
inline ::std::string* Enumeration::mutable_documentation() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Enumeration.documentation)
  return documentation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Enumeration::release_documentation() {
  // @@protoc_insertion_point(field_release:krpc.schema.Enumeration.documentation)
  
  return documentation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Enumeration::set_allocated_documentation(::std::string* documentation) {
  if (documentation != NULL) {
    
  } else {
    
  }
  documentation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentation);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Enumeration.documentation)
}

// -------------------------------------------------------------------

// EnumerationValue

// optional string name = 1;
inline void EnumerationValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumerationValue::name() const {
  // @@protoc_insertion_point(field_get:krpc.schema.EnumerationValue.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumerationValue::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.EnumerationValue.name)
}
inline void EnumerationValue::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.EnumerationValue.name)
}
inline void EnumerationValue::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.EnumerationValue.name)
}
inline ::std::string* EnumerationValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.EnumerationValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumerationValue::release_name() {
  // @@protoc_insertion_point(field_release:krpc.schema.EnumerationValue.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumerationValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.EnumerationValue.name)
}

// optional int32 value = 2;
inline void EnumerationValue::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 EnumerationValue::value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.EnumerationValue.value)
  return value_;
}
inline void EnumerationValue::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.EnumerationValue.value)
}

// optional string documentation = 3;
inline void EnumerationValue::clear_documentation() {
  documentation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumerationValue::documentation() const {
  // @@protoc_insertion_point(field_get:krpc.schema.EnumerationValue.documentation)
  return documentation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumerationValue::set_documentation(const ::std::string& value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.EnumerationValue.documentation)
}
inline void EnumerationValue::set_documentation(const char* value) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.EnumerationValue.documentation)
}
inline void EnumerationValue::set_documentation(const char* value, size_t size) {
  
  documentation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.EnumerationValue.documentation)
}
inline ::std::string* EnumerationValue::mutable_documentation() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.EnumerationValue.documentation)
  return documentation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumerationValue::release_documentation() {
  // @@protoc_insertion_point(field_release:krpc.schema.EnumerationValue.documentation)
  
  return documentation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumerationValue::set_allocated_documentation(::std::string* documentation) {
  if (documentation != NULL) {
    
  } else {
    
  }
  documentation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentation);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.EnumerationValue.documentation)
}

// -------------------------------------------------------------------

// List

// repeated bytes items = 1;
inline int List::items_size() const {
  return items_.size();
}
inline void List::clear_items() {
  items_.Clear();
}
inline const ::std::string& List::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.List.items)
  return items_.Get(index);
}
inline ::std::string* List::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.List.items)
  return items_.Mutable(index);
}
inline void List::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.schema.List.items)
  items_.Mutable(index)->assign(value);
}
inline void List::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.schema.List.items)
}
inline void List::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.List.items)
}
inline ::std::string* List::add_items() {
  // @@protoc_insertion_point(field_add_mutable:krpc.schema.List.items)
  return items_.Add();
}
inline void List::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.schema.List.items)
}
inline void List::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.schema.List.items)
}
inline void List::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.schema.List.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
List::items() const {
  // @@protoc_insertion_point(field_list:krpc.schema.List.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
List::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.List.items)
  return &items_;
}

// -------------------------------------------------------------------

// Dictionary

// repeated .krpc.schema.DictionaryEntry entries = 1;
inline int Dictionary::entries_size() const {
  return entries_.size();
}
inline void Dictionary::clear_entries() {
  entries_.Clear();
}
inline const ::krpc::schema::DictionaryEntry& Dictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Dictionary.entries)
  return entries_.Get(index);
}
inline ::krpc::schema::DictionaryEntry* Dictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Dictionary.entries)
  return entries_.Mutable(index);
}
inline ::krpc::schema::DictionaryEntry* Dictionary::add_entries() {
  // @@protoc_insertion_point(field_add:krpc.schema.Dictionary.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::krpc::schema::DictionaryEntry >*
Dictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Dictionary.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::krpc::schema::DictionaryEntry >&
Dictionary::entries() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Dictionary.entries)
  return entries_;
}

// -------------------------------------------------------------------

// DictionaryEntry

// optional bytes key = 1;
inline void DictionaryEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DictionaryEntry::key() const {
  // @@protoc_insertion_point(field_get:krpc.schema.DictionaryEntry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryEntry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.DictionaryEntry.key)
}
inline void DictionaryEntry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.DictionaryEntry.key)
}
inline void DictionaryEntry::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.DictionaryEntry.key)
}
inline ::std::string* DictionaryEntry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.DictionaryEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictionaryEntry::release_key() {
  // @@protoc_insertion_point(field_release:krpc.schema.DictionaryEntry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.DictionaryEntry.key)
}

// optional bytes value = 2;
inline void DictionaryEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DictionaryEntry::value() const {
  // @@protoc_insertion_point(field_get:krpc.schema.DictionaryEntry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryEntry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.DictionaryEntry.value)
}
inline void DictionaryEntry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.DictionaryEntry.value)
}
inline void DictionaryEntry::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.DictionaryEntry.value)
}
inline ::std::string* DictionaryEntry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.DictionaryEntry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictionaryEntry::release_value() {
  // @@protoc_insertion_point(field_release:krpc.schema.DictionaryEntry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictionaryEntry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.DictionaryEntry.value)
}

// -------------------------------------------------------------------

// Set

// repeated bytes items = 1;
inline int Set::items_size() const {
  return items_.size();
}
inline void Set::clear_items() {
  items_.Clear();
}
inline const ::std::string& Set::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Set.items)
  return items_.Get(index);
}
inline ::std::string* Set::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Set.items)
  return items_.Mutable(index);
}
inline void Set::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.schema.Set.items)
  items_.Mutable(index)->assign(value);
}
inline void Set::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.schema.Set.items)
}
inline void Set::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Set.items)
}
inline ::std::string* Set::add_items() {
  // @@protoc_insertion_point(field_add_mutable:krpc.schema.Set.items)
  return items_.Add();
}
inline void Set::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.schema.Set.items)
}
inline void Set::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.schema.Set.items)
}
inline void Set::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.schema.Set.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Set::items() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Set.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Set::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Set.items)
  return &items_;
}

// -------------------------------------------------------------------

// Tuple

// repeated bytes items = 1;
inline int Tuple::items_size() const {
  return items_.size();
}
inline void Tuple::clear_items() {
  items_.Clear();
}
inline const ::std::string& Tuple::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.schema.Tuple.items)
  return items_.Get(index);
}
inline ::std::string* Tuple::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.schema.Tuple.items)
  return items_.Mutable(index);
}
inline void Tuple::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.schema.Tuple.items)
  items_.Mutable(index)->assign(value);
}
inline void Tuple::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.schema.Tuple.items)
}
inline void Tuple::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Tuple.items)
}
inline ::std::string* Tuple::add_items() {
  // @@protoc_insertion_point(field_add_mutable:krpc.schema.Tuple.items)
  return items_.Add();
}
inline void Tuple::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.schema.Tuple.items)
}
inline void Tuple::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.schema.Tuple.items)
}
inline void Tuple::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.schema.Tuple.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tuple::items() const {
  // @@protoc_insertion_point(field_list:krpc.schema.Tuple.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Tuple::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.schema.Tuple.items)
  return &items_;
}

// -------------------------------------------------------------------

// Status

// optional string version = 1;
inline void Status::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::version() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.schema.Status.version)
}
inline void Status::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.schema.Status.version)
}
inline void Status::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.schema.Status.version)
}
inline ::std::string* Status::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:krpc.schema.Status.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_version() {
  // @@protoc_insertion_point(field_release:krpc.schema.Status.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:krpc.schema.Status.version)
}

// optional uint64 bytes_read = 2;
inline void Status::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Status::bytes_read() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.bytes_read)
  return bytes_read_;
}
inline void Status::set_bytes_read(::google::protobuf::uint64 value) {
  
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.bytes_read)
}

// optional uint64 bytes_written = 3;
inline void Status::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Status::bytes_written() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.bytes_written)
  return bytes_written_;
}
inline void Status::set_bytes_written(::google::protobuf::uint64 value) {
  
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.bytes_written)
}

// optional float bytes_read_rate = 4;
inline void Status::clear_bytes_read_rate() {
  bytes_read_rate_ = 0;
}
inline float Status::bytes_read_rate() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.bytes_read_rate)
  return bytes_read_rate_;
}
inline void Status::set_bytes_read_rate(float value) {
  
  bytes_read_rate_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.bytes_read_rate)
}

// optional float bytes_written_rate = 5;
inline void Status::clear_bytes_written_rate() {
  bytes_written_rate_ = 0;
}
inline float Status::bytes_written_rate() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.bytes_written_rate)
  return bytes_written_rate_;
}
inline void Status::set_bytes_written_rate(float value) {
  
  bytes_written_rate_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.bytes_written_rate)
}

// optional uint64 rpcs_executed = 6;
inline void Status::clear_rpcs_executed() {
  rpcs_executed_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Status::rpcs_executed() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.rpcs_executed)
  return rpcs_executed_;
}
inline void Status::set_rpcs_executed(::google::protobuf::uint64 value) {
  
  rpcs_executed_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.rpcs_executed)
}

// optional float rpc_rate = 7;
inline void Status::clear_rpc_rate() {
  rpc_rate_ = 0;
}
inline float Status::rpc_rate() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.rpc_rate)
  return rpc_rate_;
}
inline void Status::set_rpc_rate(float value) {
  
  rpc_rate_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.rpc_rate)
}

// optional bool one_rpc_per_update = 8;
inline void Status::clear_one_rpc_per_update() {
  one_rpc_per_update_ = false;
}
inline bool Status::one_rpc_per_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.one_rpc_per_update)
  return one_rpc_per_update_;
}
inline void Status::set_one_rpc_per_update(bool value) {
  
  one_rpc_per_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.one_rpc_per_update)
}

// optional uint32 max_time_per_update = 9;
inline void Status::clear_max_time_per_update() {
  max_time_per_update_ = 0u;
}
inline ::google::protobuf::uint32 Status::max_time_per_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.max_time_per_update)
  return max_time_per_update_;
}
inline void Status::set_max_time_per_update(::google::protobuf::uint32 value) {
  
  max_time_per_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.max_time_per_update)
}

// optional bool adaptive_rate_control = 10;
inline void Status::clear_adaptive_rate_control() {
  adaptive_rate_control_ = false;
}
inline bool Status::adaptive_rate_control() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.adaptive_rate_control)
  return adaptive_rate_control_;
}
inline void Status::set_adaptive_rate_control(bool value) {
  
  adaptive_rate_control_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.adaptive_rate_control)
}

// optional bool blocking_recv = 11;
inline void Status::clear_blocking_recv() {
  blocking_recv_ = false;
}
inline bool Status::blocking_recv() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.blocking_recv)
  return blocking_recv_;
}
inline void Status::set_blocking_recv(bool value) {
  
  blocking_recv_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.blocking_recv)
}

// optional uint32 recv_timeout = 12;
inline void Status::clear_recv_timeout() {
  recv_timeout_ = 0u;
}
inline ::google::protobuf::uint32 Status::recv_timeout() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.recv_timeout)
  return recv_timeout_;
}
inline void Status::set_recv_timeout(::google::protobuf::uint32 value) {
  
  recv_timeout_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.recv_timeout)
}

// optional float time_per_rpc_update = 13;
inline void Status::clear_time_per_rpc_update() {
  time_per_rpc_update_ = 0;
}
inline float Status::time_per_rpc_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.time_per_rpc_update)
  return time_per_rpc_update_;
}
inline void Status::set_time_per_rpc_update(float value) {
  
  time_per_rpc_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.time_per_rpc_update)
}

// optional float poll_time_per_rpc_update = 14;
inline void Status::clear_poll_time_per_rpc_update() {
  poll_time_per_rpc_update_ = 0;
}
inline float Status::poll_time_per_rpc_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.poll_time_per_rpc_update)
  return poll_time_per_rpc_update_;
}
inline void Status::set_poll_time_per_rpc_update(float value) {
  
  poll_time_per_rpc_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.poll_time_per_rpc_update)
}

// optional float exec_time_per_rpc_update = 15;
inline void Status::clear_exec_time_per_rpc_update() {
  exec_time_per_rpc_update_ = 0;
}
inline float Status::exec_time_per_rpc_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.exec_time_per_rpc_update)
  return exec_time_per_rpc_update_;
}
inline void Status::set_exec_time_per_rpc_update(float value) {
  
  exec_time_per_rpc_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.exec_time_per_rpc_update)
}

// optional uint32 stream_rpcs = 16;
inline void Status::clear_stream_rpcs() {
  stream_rpcs_ = 0u;
}
inline ::google::protobuf::uint32 Status::stream_rpcs() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.stream_rpcs)
  return stream_rpcs_;
}
inline void Status::set_stream_rpcs(::google::protobuf::uint32 value) {
  
  stream_rpcs_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.stream_rpcs)
}

// optional uint64 stream_rpcs_executed = 17;
inline void Status::clear_stream_rpcs_executed() {
  stream_rpcs_executed_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Status::stream_rpcs_executed() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.stream_rpcs_executed)
  return stream_rpcs_executed_;
}
inline void Status::set_stream_rpcs_executed(::google::protobuf::uint64 value) {
  
  stream_rpcs_executed_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.stream_rpcs_executed)
}

// optional float stream_rpc_rate = 18;
inline void Status::clear_stream_rpc_rate() {
  stream_rpc_rate_ = 0;
}
inline float Status::stream_rpc_rate() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.stream_rpc_rate)
  return stream_rpc_rate_;
}
inline void Status::set_stream_rpc_rate(float value) {
  
  stream_rpc_rate_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.stream_rpc_rate)
}

// optional float time_per_stream_update = 19;
inline void Status::clear_time_per_stream_update() {
  time_per_stream_update_ = 0;
}
inline float Status::time_per_stream_update() const {
  // @@protoc_insertion_point(field_get:krpc.schema.Status.time_per_stream_update)
  return time_per_stream_update_;
}
inline void Status::set_time_per_stream_update(float value) {
  
  time_per_stream_update_ = value;
  // @@protoc_insertion_point(field_set:krpc.schema.Status.time_per_stream_update)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace schema
}  // namespace krpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fkrpc_2eproto__INCLUDED
